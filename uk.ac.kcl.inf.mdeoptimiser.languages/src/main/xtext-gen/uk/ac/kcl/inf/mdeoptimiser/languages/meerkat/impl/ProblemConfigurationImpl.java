/**
 * generated by Xtext 2.16.0
 */
package uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.Batches;
import uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.Constraint;
import uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.MeerkatPackage;
import uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.Objective;
import uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.ProblemConfiguration;
import uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.TerminationCondition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Problem Configuration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.impl.ProblemConfigurationImpl#getName <em>Name</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.impl.ProblemConfigurationImpl#getObjective <em>Objective</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.impl.ProblemConfigurationImpl#getConstraint <em>Constraint</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.impl.ProblemConfigurationImpl#getBatches <em>Batches</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.impl.ProblemConfigurationImpl#getTerminationCondition <em>Termination Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProblemConfigurationImpl extends MinimalEObjectImpl.Container implements ProblemConfiguration
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getObjective() <em>Objective</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjective()
   * @generated
   * @ordered
   */
  protected EList<Objective> objective;

  /**
   * The cached value of the '{@link #getConstraint() <em>Constraint</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraint()
   * @generated
   * @ordered
   */
  protected EList<Constraint> constraint;

  /**
   * The cached value of the '{@link #getBatches() <em>Batches</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatches()
   * @generated
   * @ordered
   */
  protected Batches batches;

  /**
   * The cached value of the '{@link #getTerminationCondition() <em>Termination Condition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerminationCondition()
   * @generated
   * @ordered
   */
  protected EList<TerminationCondition> terminationCondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProblemConfigurationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MeerkatPackage.Literals.PROBLEM_CONFIGURATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MeerkatPackage.PROBLEM_CONFIGURATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Objective> getObjective()
  {
    if (objective == null)
    {
      objective = new EObjectContainmentEList<Objective>(Objective.class, this, MeerkatPackage.PROBLEM_CONFIGURATION__OBJECTIVE);
    }
    return objective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Constraint> getConstraint()
  {
    if (constraint == null)
    {
      constraint = new EObjectContainmentEList<Constraint>(Constraint.class, this, MeerkatPackage.PROBLEM_CONFIGURATION__CONSTRAINT);
    }
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Batches getBatches()
  {
    return batches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBatches(Batches newBatches, NotificationChain msgs)
  {
    Batches oldBatches = batches;
    batches = newBatches;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MeerkatPackage.PROBLEM_CONFIGURATION__BATCHES, oldBatches, newBatches);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBatches(Batches newBatches)
  {
    if (newBatches != batches)
    {
      NotificationChain msgs = null;
      if (batches != null)
        msgs = ((InternalEObject)batches).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MeerkatPackage.PROBLEM_CONFIGURATION__BATCHES, null, msgs);
      if (newBatches != null)
        msgs = ((InternalEObject)newBatches).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MeerkatPackage.PROBLEM_CONFIGURATION__BATCHES, null, msgs);
      msgs = basicSetBatches(newBatches, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MeerkatPackage.PROBLEM_CONFIGURATION__BATCHES, newBatches, newBatches));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TerminationCondition> getTerminationCondition()
  {
    if (terminationCondition == null)
    {
      terminationCondition = new EObjectContainmentEList<TerminationCondition>(TerminationCondition.class, this, MeerkatPackage.PROBLEM_CONFIGURATION__TERMINATION_CONDITION);
    }
    return terminationCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MeerkatPackage.PROBLEM_CONFIGURATION__OBJECTIVE:
        return ((InternalEList<?>)getObjective()).basicRemove(otherEnd, msgs);
      case MeerkatPackage.PROBLEM_CONFIGURATION__CONSTRAINT:
        return ((InternalEList<?>)getConstraint()).basicRemove(otherEnd, msgs);
      case MeerkatPackage.PROBLEM_CONFIGURATION__BATCHES:
        return basicSetBatches(null, msgs);
      case MeerkatPackage.PROBLEM_CONFIGURATION__TERMINATION_CONDITION:
        return ((InternalEList<?>)getTerminationCondition()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MeerkatPackage.PROBLEM_CONFIGURATION__NAME:
        return getName();
      case MeerkatPackage.PROBLEM_CONFIGURATION__OBJECTIVE:
        return getObjective();
      case MeerkatPackage.PROBLEM_CONFIGURATION__CONSTRAINT:
        return getConstraint();
      case MeerkatPackage.PROBLEM_CONFIGURATION__BATCHES:
        return getBatches();
      case MeerkatPackage.PROBLEM_CONFIGURATION__TERMINATION_CONDITION:
        return getTerminationCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MeerkatPackage.PROBLEM_CONFIGURATION__NAME:
        setName((String)newValue);
        return;
      case MeerkatPackage.PROBLEM_CONFIGURATION__OBJECTIVE:
        getObjective().clear();
        getObjective().addAll((Collection<? extends Objective>)newValue);
        return;
      case MeerkatPackage.PROBLEM_CONFIGURATION__CONSTRAINT:
        getConstraint().clear();
        getConstraint().addAll((Collection<? extends Constraint>)newValue);
        return;
      case MeerkatPackage.PROBLEM_CONFIGURATION__BATCHES:
        setBatches((Batches)newValue);
        return;
      case MeerkatPackage.PROBLEM_CONFIGURATION__TERMINATION_CONDITION:
        getTerminationCondition().clear();
        getTerminationCondition().addAll((Collection<? extends TerminationCondition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MeerkatPackage.PROBLEM_CONFIGURATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MeerkatPackage.PROBLEM_CONFIGURATION__OBJECTIVE:
        getObjective().clear();
        return;
      case MeerkatPackage.PROBLEM_CONFIGURATION__CONSTRAINT:
        getConstraint().clear();
        return;
      case MeerkatPackage.PROBLEM_CONFIGURATION__BATCHES:
        setBatches((Batches)null);
        return;
      case MeerkatPackage.PROBLEM_CONFIGURATION__TERMINATION_CONDITION:
        getTerminationCondition().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MeerkatPackage.PROBLEM_CONFIGURATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MeerkatPackage.PROBLEM_CONFIGURATION__OBJECTIVE:
        return objective != null && !objective.isEmpty();
      case MeerkatPackage.PROBLEM_CONFIGURATION__CONSTRAINT:
        return constraint != null && !constraint.isEmpty();
      case MeerkatPackage.PROBLEM_CONFIGURATION__BATCHES:
        return batches != null;
      case MeerkatPackage.PROBLEM_CONFIGURATION__TERMINATION_CONDITION:
        return terminationCondition != null && !terminationCondition.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ProblemConfigurationImpl
