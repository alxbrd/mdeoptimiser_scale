/**
 * generated by Xtext 2.18.0
 */
package uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.Analyser;
import uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.MeerkatPackage;
import uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.Problem;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Analyser</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.meerkat.impl.AnalyserImpl#getProblems <em>Problems</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AnalyserImpl extends MinimalEObjectImpl.Container implements Analyser
{
  /**
   * The cached value of the '{@link #getProblems() <em>Problems</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProblems()
   * @generated
   * @ordered
   */
  protected EList<Problem> problems;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnalyserImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MeerkatPackage.Literals.ANALYSER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Problem> getProblems()
  {
    if (problems == null)
    {
      problems = new EObjectContainmentEList<Problem>(Problem.class, this, MeerkatPackage.ANALYSER__PROBLEMS);
    }
    return problems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MeerkatPackage.ANALYSER__PROBLEMS:
        return ((InternalEList<?>)getProblems()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MeerkatPackage.ANALYSER__PROBLEMS:
        return getProblems();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MeerkatPackage.ANALYSER__PROBLEMS:
        getProblems().clear();
        getProblems().addAll((Collection<? extends Problem>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MeerkatPackage.ANALYSER__PROBLEMS:
        getProblems().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MeerkatPackage.ANALYSER__PROBLEMS:
        return problems != null && !problems.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AnalyserImpl
